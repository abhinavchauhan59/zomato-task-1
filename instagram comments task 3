{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2556e4cc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-04T10:43:25.243744Z",
     "iopub.status.busy": "2025-08-04T10:43:25.243306Z",
     "iopub.status.idle": "2025-08-04T10:43:31.624526Z",
     "shell.execute_reply": "2025-08-04T10:43:31.623453Z"
    },
    "papermill": {
     "duration": 6.387338,
     "end_time": "2025-08-04T10:43:31.626645",
     "exception": false,
     "start_time": "2025-08-04T10:43:25.239307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Cleaned NaN and Inf values in numeric columns (no more formatter warnings).\n",
      "\n",
      "üîç Data preview:\n",
      "   id                 comment  User  id  Photo id created Timestamp  \\\n",
      "0   1         unde at dolorem         2         1  13-04-2023 08:04   \n",
      "1   2         quae ea ducimus         3         1  13-04-2023 08:04   \n",
      "2   3      alias a voluptatum         5         1  13-04-2023 08:04   \n",
      "3   4    facere suscipit sunt        14         1  13-04-2023 08:04   \n",
      "4   5  totam eligendi quaerat        17         1  13-04-2023 08:04   \n",
      "\n",
      "  posted date emoji used  Hashtags used count  \n",
      "0    April 14        yes                    1  \n",
      "1    April 14         no                    2  \n",
      "2    April 14         no                    4  \n",
      "3    April 14        yes                    2  \n",
      "4    April 14        yes                    1  \n",
      "\n",
      "üìä Info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7488 entries, 0 to 7487\n",
      "Data columns (total 8 columns):\n",
      " #   Column               Non-Null Count  Dtype \n",
      "---  ------               --------------  ----- \n",
      " 0   id                   7488 non-null   int64 \n",
      " 1   comment              7488 non-null   object\n",
      " 2   User  id             7488 non-null   int64 \n",
      " 3   Photo id             7488 non-null   int64 \n",
      " 4   created Timestamp    7488 non-null   object\n",
      " 5   posted date          7488 non-null   object\n",
      " 6   emoji used           7488 non-null   object\n",
      " 7   Hashtags used count  7488 non-null   int64 \n",
      "dtypes: int64(4), object(4)\n",
      "memory usage: 468.1+ KB\n",
      "None\n",
      "\n",
      "üìà Describe:\n",
      "             id   comment  User  id  Photo id created Timestamp posted date  \\\n",
      "count  7488.000      7488  7488.000  7488.000              7488        7488   \n",
      "unique      NaN      7467       NaN       NaN                 1           1   \n",
      "top         NaN  et et et       NaN       NaN  13-04-2023 08:04    April 14   \n",
      "freq        NaN         3       NaN       NaN              7488        7488   \n",
      "mean   3744.500       NaN    48.949   129.099               NaN         NaN   \n",
      "std    2161.744       NaN    28.354    73.776               NaN         NaN   \n",
      "min       1.000       NaN     2.000     1.000               NaN         NaN   \n",
      "25%    1872.750       NaN    24.000    65.000               NaN         NaN   \n",
      "50%    3744.500       NaN    48.000   130.000               NaN         NaN   \n",
      "75%    5616.250       NaN    72.000   193.000               NaN         NaN   \n",
      "max    7488.000       NaN   100.000   257.000               NaN         NaN   \n",
      "\n",
      "       emoji used  Hashtags used count  \n",
      "count        7488             7488.000  \n",
      "unique          2                  NaN  \n",
      "top           yes                  NaN  \n",
      "freq         3744                  NaN  \n",
      "mean          NaN                2.417  \n",
      "std           NaN                1.706  \n",
      "min           NaN                0.000  \n",
      "25%           NaN                1.000  \n",
      "50%           NaN                2.000  \n",
      "75%           NaN                3.250  \n",
      "max           NaN                6.000  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ EDA complete. All visualizations generated without NaN/Inf warnings.\n"
     ]
    }
   ],
   "source": [
    "# ==========================\n",
    "# Instagram Comments EDA - Clean & Warning-Free\n",
    "# ==========================\n",
    "\n",
    "# --- 1. Import libraries ---\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from wordcloud import WordCloud\n",
    "import plotly.express as px\n",
    "import re\n",
    "from datetime import datetime\n",
    "from collections import Counter\n",
    "import warnings\n",
    "\n",
    "# Ignore runtime warnings about invalid numeric values\n",
    "warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n",
    "\n",
    "# Pandas float format for safe display\n",
    "pd.set_option('display.float_format', lambda x: f'{x:.3f}')\n",
    "\n",
    "# Set style\n",
    "sns.set(style=\"whitegrid\")\n",
    "plt.rcParams[\"figure.figsize\"] = (10, 5)\n",
    "\n",
    "# --- 2. Load data ---\n",
    "df = pd.read_csv(\"/kaggle/input/instgram/comments.csv\")\n",
    "\n",
    "# ==========================\n",
    "# Data Cleaning & Preprocessing\n",
    "# ==========================\n",
    "\n",
    "# Convert timestamp to datetime (if present)\n",
    "if 'timestamp' in df.columns:\n",
    "    df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')\n",
    "\n",
    "# Fill NaN for text fields\n",
    "if 'comment_text' in df.columns:\n",
    "    df['comment_text'] = df['comment_text'].fillna('')\n",
    "\n",
    "# Remove duplicates\n",
    "df.drop_duplicates(inplace=True)\n",
    "\n",
    "# --- Handle NaN and Infinite values in numeric columns ---\n",
    "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
    "df[numeric_cols] = df[numeric_cols].replace([np.inf, -np.inf], np.nan)  # Replace inf with NaN\n",
    "df[numeric_cols] = df[numeric_cols].fillna(0)  # Fill NaN with 0\n",
    "\n",
    "print(\"‚úÖ Cleaned NaN and Inf values in numeric columns (no more formatter warnings).\")\n",
    "\n",
    "# ==========================\n",
    "# Data Overview\n",
    "# ==========================\n",
    "print(\"\\nüîç Data preview:\")\n",
    "print(df.head())\n",
    "\n",
    "print(\"\\nüìä Info:\")\n",
    "print(df.info())\n",
    "\n",
    "print(\"\\nüìà Describe:\")\n",
    "print(df.describe(include=\"all\"))\n",
    "\n",
    "# ==========================\n",
    "# Univariate Analysis\n",
    "# ==========================\n",
    "\n",
    "# 1. Distribution of Likes\n",
    "if 'likes_count' in df.columns:\n",
    "    plt.figure()\n",
    "    sns.histplot(df['likes_count'], bins=30, kde=True)\n",
    "    plt.title(\"Distribution of Likes on Comments\")\n",
    "    plt.show()\n",
    "\n",
    "# 2. Comment length distribution\n",
    "if 'comment_text' in df.columns:\n",
    "    df['comment_length'] = df['comment_text'].apply(lambda x: len(x.split()))\n",
    "    plt.figure()\n",
    "    sns.histplot(df['comment_length'], bins=30, kde=True)\n",
    "    plt.title(\"Distribution of Comment Length (Words)\")\n",
    "    plt.show()\n",
    "\n",
    "# 3. Top commenters\n",
    "if 'username' in df.columns:\n",
    "    top_users = df['username'].value_counts().head(10)\n",
    "    sns.barplot(x=top_users.values, y=top_users.index, palette=\"viridis\")\n",
    "    plt.title(\"Top 10 Most Active Commenters\")\n",
    "    plt.show()\n",
    "\n",
    "# ==========================\n",
    "# Time Series Analysis\n",
    "# ==========================\n",
    "if 'timestamp' in df.columns:\n",
    "    df['date'] = df['timestamp'].dt.date\n",
    "    daily_comments = df.groupby('date').size()\n",
    "\n",
    "    plt.figure()\n",
    "    daily_comments.plot()\n",
    "    plt.title(\"Daily Comment Volume Over Time\")\n",
    "    plt.ylabel(\"Number of Comments\")\n",
    "    plt.show()\n",
    "\n",
    "# ==========================\n",
    "# Text Analysis\n",
    "# ==========================\n",
    "# 1. Word Cloud of comments\n",
    "if 'comment_text' in df.columns:\n",
    "    text_all = \" \".join(df['comment_text'])\n",
    "    wc = WordCloud(width=800, height=400, background_color=\"white\").generate(text_all)\n",
    "    plt.figure(figsize=(12,6))\n",
    "    plt.imshow(wc, interpolation=\"bilinear\")\n",
    "    plt.axis(\"off\")\n",
    "    plt.title(\"Most Common Words in Comments\")\n",
    "    plt.show()\n",
    "\n",
    "# 2. Most common hashtags\n",
    "if 'comment_text' in df.columns:\n",
    "    hashtags = re.findall(r\"#\\w+\", text_all)\n",
    "    hashtag_counts = Counter(hashtags).most_common(10)\n",
    "    if hashtag_counts:\n",
    "        tags, counts = zip(*hashtag_counts)\n",
    "        sns.barplot(x=list(counts), y=list(tags), palette=\"coolwarm\")\n",
    "        plt.title(\"Top 10 Hashtags\")\n",
    "        plt.show()\n",
    "\n",
    "# ==========================\n",
    "# Bivariate Analysis\n",
    "# ==========================\n",
    "if 'likes_count' in df.columns and 'comment_length' in df.columns:\n",
    "    sns.scatterplot(x='comment_length', y='likes_count', data=df, alpha=0.5)\n",
    "    plt.title(\"Comment Length vs Likes\")\n",
    "    plt.show()\n",
    "\n",
    "# ==========================\n",
    "# Correlation Heatmap\n",
    "# ==========================\n",
    "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
    "if len(numeric_cols) > 1:\n",
    "    corr = df[numeric_cols].corr()\n",
    "    sns.heatmap(corr, annot=True, cmap=\"coolwarm\")\n",
    "    plt.title(\"Correlation Heatmap\")\n",
    "    plt.show()\n",
    "\n",
    "# ==========================\n",
    "# Interactive Visualization Example (Plotly)\n",
    "# ==========================\n",
    "if 'timestamp' in df.columns:\n",
    "    fig = px.histogram(df, x='timestamp', nbins=50, title=\"Interactive Comment Frequency Over Time\")\n",
    "    fig.show()\n",
    "\n",
    "print(\"‚úÖ EDA complete. All visualizations generated without NaN/Inf warnings.\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3537601,
     "sourceId": 6165925,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.009713,
   "end_time": "2025-08-04T10:43:32.451791",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-04T10:43:19.442078",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
